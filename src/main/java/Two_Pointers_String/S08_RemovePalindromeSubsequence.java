package Two_Pointers_String;

import org.testng.Assert;
import org.testng.annotations.Test;

public class S08_RemovePalindromeSubsequence {
	
	/* Leetcode_1332 : https://leetcode.com/problems/remove-palindromic-subsequences/
	 
	 You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
	 Return the minimum number of steps to make the given string empty.
	 A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order.
	 Note that a subsequence does not necessarily need to be contiguous.
	 A string is called palindrome if is one that reads the same backward as well as forward.
	 
	 Constraints:

		1 <= s.length <= 1000
		s[i] is either 'a' or 'b'.	
	*/

	@Test
	public void example1() {		
		String s = "ababa";
		int output = 1;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void example2() {		
		String s = "abb";
		int output = 2;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void example3() {		
		String s = "baabb";
		int output = 2;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	@Test
	public void example4() {		
		String s = "";
		int output = 0;
		Assert.assertEquals(removePalindromeSub(s), output);
	}
	
	/* Pseudo code:
	 
		1. If the given string is empty, return 0
	    2. If the given string is a palindrome, return 1
	    3. If the given string is not a palindrome, return 2

	*/
	
	public int removePalindromeSub(String s) {
		
		int left = 0, right = s.length()-1;
		
		if(s.length()==0) return 0;
		
		while(left<right) {
			
			if(s.charAt(left)!=s.charAt(right)) {
				return 2;
			}
			else 
				left++;
				right--;			
		}
		return 1;
	}
}